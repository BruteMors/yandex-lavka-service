// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/courier.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	"yandex-lavka-service/internal/domain/entity"
)

// MockCourierStore is a mock of CourierStore interface.
type MockCourierStore struct {
	ctrl     *gomock.Controller
	recorder *MockCourierStoreMockRecorder
}

// MockCourierStoreMockRecorder is the mock recorder for MockCourierStore.
type MockCourierStoreMockRecorder struct {
	mock *MockCourierStore
}

// NewMockCourierStore creates a new mock instance.
func NewMockCourierStore(ctrl *gomock.Controller) *MockCourierStore {
	mock := &MockCourierStore{ctrl: ctrl}
	mock.recorder = &MockCourierStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierStore) EXPECT() *MockCourierStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCourierStore) Add(couriers ...entity.Courier) (*[]entity.CourierDto, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range couriers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*[]entity.CourierDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCourierStoreMockRecorder) Add(couriers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCourierStore)(nil).Add), couriers...)
}

// Get mocks base method.
func (m *MockCourierStore) Get(id int64) (*entity.CourierDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.CourierDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourierStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourierStore)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockCourierStore) GetAll(limit, offset int) (*[]entity.CourierDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit, offset)
	ret0, _ := ret[0].(*[]entity.CourierDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCourierStoreMockRecorder) GetAll(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCourierStore)(nil).GetAll), limit, offset)
}

// GetCosts mocks base method.
func (m *MockCourierStore) GetCosts(id int64, startDate, endDate string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCosts", id, startDate, endDate)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCosts indicates an expected call of GetCosts.
func (mr *MockCourierStoreMockRecorder) GetCosts(id, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCosts", reflect.TypeOf((*MockCourierStore)(nil).GetCosts), id, startDate, endDate)
}
