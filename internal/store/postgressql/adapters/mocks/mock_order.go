// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/order.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	"yandex-lavka-service/internal/domain/entity"
)

// MockOrderStore is a mock of OrderStore interface.
type MockOrderStore struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStoreMockRecorder
}

// MockOrderStoreMockRecorder is the mock recorder for MockOrderStore.
type MockOrderStoreMockRecorder struct {
	mock *MockOrderStore
}

// NewMockOrderStore creates a new mock instance.
func NewMockOrderStore(ctrl *gomock.Controller) *MockOrderStore {
	mock := &MockOrderStore{ctrl: ctrl}
	mock.recorder = &MockOrderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStore) EXPECT() *MockOrderStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOrderStore) Add(orders ...entity.Order) (*[]entity.OrderDto, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range orders {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*[]entity.OrderDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockOrderStoreMockRecorder) Add(orders ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrderStore)(nil).Add), orders...)
}

// Get mocks base method.
func (m *MockOrderStore) Get(id int64) (*entity.OrderDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.OrderDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderStore)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockOrderStore) GetAll(limit, offset int) (*[]entity.OrderDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit, offset)
	ret0, _ := ret[0].(*[]entity.OrderDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderStoreMockRecorder) GetAll(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderStore)(nil).GetAll), limit, offset)
}

// SetCompleted mocks base method.
func (m *MockOrderStore) SetCompleted(completedOrders ...entity.CompleteOrder) (*[]entity.OrderDto, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range completedOrders {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCompleted", varargs...)
	ret0, _ := ret[0].(*[]entity.OrderDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCompleted indicates an expected call of SetCompleted.
func (mr *MockOrderStoreMockRecorder) SetCompleted(completedOrders ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCompleted", reflect.TypeOf((*MockOrderStore)(nil).SetCompleted), completedOrders...)
}
